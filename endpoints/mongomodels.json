{
  "swagger": "2.0",
  "info": {
    "title": "mongo/models",
    "version": "1.0.0"
  },
  "basePath": "/endpoints",
  "paths": {
    "/models": {
      "post": {
        "responses": {
          "201": {
            "description": "The create succeeded.",
            "headers": {
              "Location": {
                "description": "The URL to the newly created instance.",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "This request requires user authentication, as configured by the server."
          },
          "404": {
            "description": "No results were found."
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server."
          }
        },
        "description": "Create a mongo/models",
        "operationId": "Create mongo/model",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Create body",
            "schema": {
              "$ref": "schema:///model/mongo/models"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mongo/models"
        ],
        "x-flow": "mongomodels-create"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "The delete succeeded."
          },
          "401": {
            "description": "This request requires user authentication, as configured by the server."
          },
          "404": {
            "description": "No results were found."
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server."
          }
        },
        "description": "Deletes all mongo/modelss",
        "operationId": "Delete All mongo/model",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mongo/models"
        ],
        "x-flow": "mongomodels-deleteAll"
      },
      "get": {
        "responses": {
          "200": {
            "description": "The find all succeeded, and the results are available.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "schema:///model/mongo/models"
              }
            }
          },
          "401": {
            "description": "This request requires user authentication, as configured by the server."
          },
          "404": {
            "description": "No results were found."
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server."
          }
        },
        "description": "Find all mongo/models",
        "operationId": "Find All mongo/model",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mongo/models"
        ],
        "x-flow": "mongomodels-findAll"
      }
    },
    "/models/{id}": {
      "put": {
        "responses": {
          "204": {
            "description": "The update succeeded."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "This request requires user authentication, as configured by the server."
          },
          "404": {
            "description": "No results were found."
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server."
          }
        },
        "description": "Update a mongo/models",
        "operationId": "Update mongo/model",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The mongo/models ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Update body",
            "schema": {
              "$ref": "schema:///model/mongo/models"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mongo/models"
        ],
        "x-flow": "mongomodels-update"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "The delete succeeded."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "This request requires user authentication, as configured by the server."
          },
          "404": {
            "description": "No results were found."
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server."
          }
        },
        "description": "Delete a specific mongo/models",
        "operationId": "Delete One mongo/model",
        "consumes": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The mongo/models ID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mongo/models"
        ],
        "x-flow": "mongomodels-delete"
      },
      "get": {
        "responses": {
          "200": {
            "description": "The find succeeded, and the results are available.",
            "schema": {
              "$ref": "schema:///model/mongo/models"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "This request requires user authentication, as configured by the server."
          },
          "404": {
            "description": "No results were found."
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server."
          }
        },
        "description": "Find one mongo/models",
        "operationId": "Find By ID mongo/model",
        "consumes": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The mongo/models ID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mongo/models"
        ],
        "x-flow": "mongomodels-findByID"
      }
    },
    "/models/distinct/{field}": {
      "get": {
        "responses": {
          "200": {
            "description": "Distinct fields response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "This request requires user authentication, as configured by the server."
          },
          "404": {
            "description": "No results were found."
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server."
          }
        },
        "description": "Find distinct mongo/models",
        "operationId": "Distinct mongo/model",
        "consumes": [],
        "parameters": [
          {
            "in": "path",
            "name": "field",
            "description": "The field name that must be distinct.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of records to fetch. The value must be greater than 0, and no greater than 1000.",
            "required": false,
            "type": "number",
            "default": 10
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The number of records to skip. The value must not be less than 0.",
            "required": false,
            "type": "number",
            "default": 0
          },
          {
            "in": "query",
            "name": "where",
            "description": "Constrains values for fields. The value should be encoded JSON.",
            "required": false,
            "type": "string",
            "format": "json"
          },
          {
            "in": "query",
            "name": "order",
            "description": "A dictionary of one or more fields specifying sorting of results. In general, you can sort based on any predefined field that you can query using the where operator, as well as on custom fields. The value should be encoded JSON.",
            "required": false,
            "type": "string",
            "format": "json"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Request page number starting from 1.",
            "required": false,
            "type": "number",
            "default": 1
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results per page.",
            "required": false,
            "type": "number",
            "default": 10
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mongo/models"
        ],
        "x-flow": "mongomodels-distinct"
      }
    },
    "/models/findAndModify": {
      "put": {
        "responses": {
          "204": {
            "description": "The find and modify succeeded.",
            "schema": {
              "$ref": "schema:///model/mongo/models"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "This request requires user authentication, as configured by the server."
          },
          "404": {
            "description": "No results were found."
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server."
          }
        },
        "description": "Find and modify mongo/modelss",
        "operationId": "Find and Modify mongo/model",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Find and modify body",
            "schema": {
              "$ref": "schema:///model/mongo/models"
            }
          },
          {
            "name": "new",
            "in": "query",
            "type": "boolean",
            "description": "Set to true to return the new model instead of the original model."
          },
          {
            "name": "upsert",
            "in": "query",
            "type": "boolean",
            "description": "Set to true to allow the method to create a new model."
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of records to fetch. The value must be greater than 0, and no greater than 1000.",
            "required": false,
            "type": "number",
            "default": 10
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The number of records to skip. The value must not be less than 0.",
            "required": false,
            "type": "number",
            "default": 0
          },
          {
            "in": "query",
            "name": "where",
            "description": "Constrains values for fields. The value should be encoded JSON.",
            "required": false,
            "type": "string",
            "format": "json"
          },
          {
            "in": "query",
            "name": "order",
            "description": "A dictionary of one or more fields specifying sorting of results. In general, you can sort based on any predefined field that you can query using the where operator, as well as on custom fields. The value should be encoded JSON.",
            "required": false,
            "type": "string",
            "format": "json"
          },
          {
            "in": "query",
            "name": "sel",
            "description": "Selects which fields to return from the query. Others are excluded. The value should be encoded JSON.",
            "required": false,
            "type": "string",
            "format": "json"
          },
          {
            "in": "query",
            "name": "unsel",
            "description": "Selects which fields to not return from the query. Others are included. The value should be encoded JSON.",
            "required": false,
            "type": "string",
            "format": "json"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Request page number starting from 1.",
            "required": false,
            "type": "number",
            "default": 1
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results per page.",
            "required": false,
            "type": "number",
            "default": 10
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mongo/models"
        ],
        "x-flow": "mongomodels-findAndModify"
      }
    },
    "/models/count": {
      "get": {
        "responses": {
          "200": {
            "description": "The count succeeded, and the results are available.",
            "schema": {
              "type": "integer"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "This request requires user authentication, as configured by the server."
          },
          "404": {
            "description": "No results were found."
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server."
          }
        },
        "description": "Count a mongo/models",
        "operationId": "Count mongo/model",
        "consumes": [],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "The number of records to fetch. The value must be greater than 0, and no greater than 1000.",
            "required": false,
            "type": "number",
            "default": 10
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The number of records to skip. The value must not be less than 0.",
            "required": false,
            "type": "number",
            "default": 0
          },
          {
            "in": "query",
            "name": "where",
            "description": "Constrains values for fields. The value should be encoded JSON.",
            "required": false,
            "type": "string",
            "format": "json"
          },
          {
            "in": "query",
            "name": "order",
            "description": "A dictionary of one or more fields specifying sorting of results. In general, you can sort based on any predefined field that you can query using the where operator, as well as on custom fields. The value should be encoded JSON.",
            "required": false,
            "type": "string",
            "format": "json"
          },
          {
            "in": "query",
            "name": "sel",
            "description": "Selects which fields to return from the query. Others are excluded. The value should be encoded JSON.",
            "required": false,
            "type": "string",
            "format": "json"
          },
          {
            "in": "query",
            "name": "unsel",
            "description": "Selects which fields to not return from the query. Others are included. The value should be encoded JSON.",
            "required": false,
            "type": "string",
            "format": "json"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Request page number starting from 1.",
            "required": false,
            "type": "number",
            "default": 1
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results per page.",
            "required": false,
            "type": "number",
            "default": 10
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mongo/models"
        ],
        "x-flow": "mongomodels-count"
      }
    },
    "/models/upsert": {
      "post": {
        "responses": {
          "201": {
            "description": "The upsert succeeded, and resulted in an insert.",
            "headers": {
              "Location": {
                "description": "The URL to the newly created instance.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "The upsert succeeded, and resulted in an update."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "This request requires user authentication, as configured by the server."
          },
          "404": {
            "description": "No results were found."
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server."
          }
        },
        "description": "Create or update a mongo/models",
        "operationId": "Upsert mongo/model",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Upsert body",
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The mongo/models ID"
                    }
                  }
                },
                {
                  "$ref": "schema:///model/mongo/models"
                }
              ]
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mongo/models"
        ],
        "x-flow": "mongomodels-upsert"
      }
    },
    "/models/query": {
      "get": {
        "responses": {
          "200": {
            "description": "The query succeeded, and the results are available.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "schema:///model/mongo/models"
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "This request requires user authentication, as configured by the server."
          },
          "404": {
            "description": "No results were found."
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server."
          }
        },
        "description": "Query a mongo/models",
        "operationId": "Query mongo/model",
        "consumes": [],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "The number of records to fetch. The value must be greater than 0, and no greater than 1000.",
            "required": false,
            "type": "number",
            "default": 10
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The number of records to skip. The value must not be less than 0.",
            "required": false,
            "type": "number",
            "default": 0
          },
          {
            "in": "query",
            "name": "where",
            "description": "Constrains values for fields. The value should be encoded JSON.",
            "required": false,
            "type": "string",
            "format": "json"
          },
          {
            "in": "query",
            "name": "order",
            "description": "A dictionary of one or more fields specifying sorting of results. In general, you can sort based on any predefined field that you can query using the where operator, as well as on custom fields. The value should be encoded JSON.",
            "required": false,
            "type": "string",
            "format": "json"
          },
          {
            "in": "query",
            "name": "sel",
            "description": "Selects which fields to return from the query. Others are excluded. The value should be encoded JSON.",
            "required": false,
            "type": "string",
            "format": "json"
          },
          {
            "in": "query",
            "name": "unsel",
            "description": "Selects which fields to not return from the query. Others are included. The value should be encoded JSON.",
            "required": false,
            "type": "string",
            "format": "json"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Request page number starting from 1.",
            "required": false,
            "type": "number",
            "default": 1
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results per page.",
            "required": false,
            "type": "number",
            "default": 10
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mongo/models"
        ],
        "x-flow": "mongomodels-query"
      }
    }
  }
}